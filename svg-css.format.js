var N=0,v=()=>(N+=1,`timestamp${Math.floor(performance.timeOrigin+performance.now())}counter${N}`);var m="http://www.w3.org/2000/svg";var C=t=>{let[e,o,s,u]=t.split(" ").map(n=>parseInt(n,10));return{minX:e,minY:o,width:s,height:u}};var $=(t,e)=>{let{includeBackground:o,backgroundColor:s}=t;if(!o)return null;let u=document.createElementNS(m,"g"),n=document.createElementNS(m,"rect");return n.setAttributeNS(null,"width",e.width.toString()),n.setAttributeNS(null,"height",e.height.toString()),n.setAttributeNS(null,"fill",s),u.append(n),u},P=(t,e)=>{let o=document.createElementNS(m,"line");return o.setAttributeNS(null,"x1",t.startPoint.x.toString()),o.setAttributeNS(null,"y1",t.startPoint.y.toString()),o.setAttributeNS(null,"x2",t.endPoint.x.toString()),o.setAttributeNS(null,"y2",t.endPoint.y.toString()),o.setAttributeNS(null,"stroke",e),o.setAttributeNS(null,"stroke-width","1%"),o},B=(t,e)=>{if(!t.includeGrid)return null;let o=document.createElementNS(m,"g"),{width:s,height:u}=e;for(let n=1;n<t.gridColumns;n+=1){let i=s*(n/t.gridColumns),a={startPoint:{x:i,y:0},endPoint:{x:i,y:u}};o.append(P(a,t.gridColor))}for(let n=1;n<t.gridRows;n+=1){let i=u*(n/t.gridRows),a={startPoint:{x:0,y:i},endPoint:{x:s,y:i}};o.append(P(a,t.gridColor))}return o},b=t=>{let{character:e,strokeColor:o,uniqueId:s,isStatic:u}=t,n=[];for(let i=0;i<e.strokes.length;i+=1){let a=e.strokes[i],c=document.createElementNS(m,"path");c.setAttributeNS(null,"d",a.strokePath);let r=null,l=null;if(a.clipPath!==null){let p=["clipPath",...u?["static"]:[],i.toString(),s].join("-");r=document.createElementNS(m,"clipPath"),r.setAttributeNS(null,"id",p),c.setAttributeNS(null,"clip-path",`url(#${p})`),l=document.createElementNS(m,"path"),l.setAttributeNS(null,"d",a.clipPath),r.append(l)}c.setAttributeNS(null,"fill","none"),c.setAttributeNS(null,"stroke",o),c.setAttributeNS(null,"stroke-linecap","round"),c.setAttributeNS(null,"stroke-linejoin","round"),u&&c.setAttributeNS(null,"stroke-width",a.strokeWidth.toString()),n.push({clipPath:r,clipPathPath:l,strokePath:c})}return n},V=(t,e,o)=>{if(!e.includePreview)return null;let s=document.createElementNS(m,"g");return b({character:t,strokeColor:e.previewColor,uniqueId:o,isStatic:!0}).forEach(({clipPath:n,strokePath:i})=>{n!==null&&s.append(n),s.append(i)}),s},A=(t,e,o)=>{let s=document.createElementNS(m,"svg");s.setAttribute("xmlns",m),s.setAttributeNS(null,"viewBox",t.viewBox);let u=C(t.viewBox),n=$(e,u);n!==null&&s.append(n);let i=B(e,u);i!==null&&s.append(i);let a=document.createElementNS(m,"g");t.transform!==null&&a.setAttributeNS(null,"transform",t.transform),s.append(a);let c=V(t,e,o);c!==null&&a.append(c);let r=b({character:t,strokeColor:e.strokeColor,uniqueId:o,isStatic:!1});return r.forEach(({clipPath:l,strokePath:p})=>{l!==null&&a.append(l),a.append(p)}),{svg:s,group:a,strokesComponents:r}},E=t=>{for(;t.lastChild!==null;)t.removeChild(t.lastChild);for(;t.attributes.length>0;)t.removeAttribute(t.attributes[0].name)};var x=t=>{let e=document.createElementNS(m,"path");return e.setAttributeNS(null,"d",t),Math.ceil(e.getTotalLength())};var X="svg-css",R=t=>t instanceof CSSKeyframesRule,G=(t,e,o)=>{let{strokes:s}=t,{pauseRatio:u,totalStrokeDuration:n}=o,i=Math.min(s.length,e.length),a=document.createElementNS(m,"style"),c=n*i,r=new CSSStyleSheet;for(let l=0;l<i;l+=1){let{strokePath:p,strokeWidth:f}=s[l],h=x(p),S=e[l],y=l/i*100,k=(l+(1-u))/i*100,w=l*n,d=r.cssRules[r.insertRule(`@keyframes dash-${S} {}`,r.cssRules.length)];if(!R(d))throw new TypeError("keyframesDash must be a CSSKeyframesRule.");w>0&&d.appendRule(`0% { stroke-dasharray: 0 ${h}; }`),d.appendRule(`${y}% { stroke-dasharray: 0 ${h}; animation-timing-function: linear; }`),k<100&&d.appendRule(`${k}% { stroke-dasharray: ${h} 0; }`),d.appendRule(`100% { stroke-dasharray: ${h} 0; }`);let g=r.cssRules[r.insertRule(`@keyframes width-${S} {}`,r.cssRules.length)];if(!R(g))throw new TypeError("keyframesWidth must be a CSSKeyframesRule.");w>0&&g.appendRule("0% { stroke-width: 0; animation-timing-function: steps(1, end); }"),g.appendRule(`${y}% { stroke-width: ${f}; }`),k<100&&g.appendRule(`${k}% { stroke-width: ${f}; }`),g.appendRule(`100% { stroke-width: ${f}; }`),r.insertRule(`#${S} { animation: dash-${S} ${c}s infinite, width-${S} ${c}s infinite; }`,r.cssRules.length)}return a.append(Array.from(r.cssRules).map(l=>l.cssText).join(`
`)),a},Y=(t,e)=>{let o=v(),{svg:s,group:u,strokesComponents:n}=A(t,e,o),i=[],a=[];for(let r=0;r<t.strokes.length;r+=1){let l=n[r],p=`strokePath-${r}-${o}`;i.push(p),l.strokePath.setAttributeNS(null,"id",p),a.push(l.strokePath)}let c=G(t,i,e);return u.append(c),Object.freeze({element:s,dispose:()=>{E(s)},isPaused:()=>a.every(r=>r.style.animationPlayState==="paused"),pause:()=>{a.forEach(r=>{r.style.animationPlayState="paused"})},resume:()=>{a.forEach(r=>{r.style.animationPlayState="running"})}})};export{Y as animator,X as format};
