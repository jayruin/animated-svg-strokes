var k=r=>{if(typeof r!="string")throw new TypeError("characterString must be a string.");if(r.length!==1)throw new RangeError("Must be a single character.");let e=r.codePointAt(0);if(typeof e>"u")throw new RangeError("Cannot get code point.");return e};var m=new Map,H=()=>Object.freeze(new Set(m.keys())),y=r=>{let e=m.get(r);if(typeof e>"u")throw new Error("Unsupported format.");return e},x=r=>{m.set(r.format,r)},w=r=>{let{animator:e}=y(r);return(t,a)=>{let{codePoint:n,source:s,strokes:i,transform:c,viewBox:l}=t;return{...e({strokes:i,transform:c,viewBox:l},a),codePoint:n,source:s,format:r}}};var $=r=>CSS.supports("color",r)&&["currentcolor","inherit","initial","revert","revert-layer","unset"].every(e=>e.localeCompare(r,void 0,{sensitivity:"accent"})!==0),v=r=>typeof r=="string",d=r=>typeof r=="number",A=r=>typeof r=="boolean",f=function*(r,e){A(r)||(yield new TypeError(`${e} is not a boolean.`))},p=function*(r,e){v(r)||(yield new TypeError(`${e} is not a string.`)),$(r)||(yield new RangeError(`${e} is not a valid color.`))},u=function*(r,e,o){d(r)||(yield new TypeError(`${e} is not a number.`)),isNaN(r)&&(yield new RangeError(`${e} is NaN.`)),isFinite(r)||(yield new RangeError(`${e} is not finite.`)),d(o?.gt)&&!(r>o.gt)&&(yield new RangeError(`${e} is not > ${o.gt}.`)),d(o?.lt)&&!(r<o.lt)&&(yield new RangeError(`${e} is not < ${o.lt}.`)),d(o?.ge)&&!(r>=o.ge)&&(yield new RangeError(`${e} is not >= ${o.ge}.`)),d(o?.le)&&!(r<=o.le)&&(yield new RangeError(`${e} is not <= ${o.le}.`))},P=r=>{let{includeGrid:e,gridColor:o,gridRows:t,gridColumns:a,includeBackground:n,backgroundColor:s,includePreview:i,previewColor:c,strokeColor:l,pauseRatio:E,totalStrokeDuration:O}=r,g=[...f(e,"includeGrid"),...p(o,"gridColor"),...u(t,"gridRows",{ge:1}),...u(a,"gridColumns",{ge:1}),...f(n,"includeBackground"),...p(s,"backgroundColor"),...f(i,"includePreview"),...p(c,"previewColor"),...p(l,"strokeColor"),...u(E,"pauseRatio",{ge:0,lt:1}),...u(O,"totalStrokeDuration",{gt:0})];if(g.length>0)throw new AggregateError(g,g.map(h=>h.message).join(" "))},C=Object.freeze({includeGrid:!1,gridColor:"#d3d3d3",gridRows:2,gridColumns:2,includeBackground:!1,backgroundColor:"#ffffff",includePreview:!1,previewColor:"#c0c0c0",strokeColor:"#000000",pauseRatio:.2,totalStrokeDuration:1}),b=r=>{let e={...C,...Object.fromEntries(Object.entries(r??{}).filter(([o,t])=>o in C&&typeof t<"u"&&t!==null))};return P(e),Object.freeze(e)};var S=new Map,j=()=>Object.freeze(new Set(S.keys())),R=r=>{let e=S.get(r);if(typeof e>"u")throw new Error("Unsupported source.");return e},N=r=>{S.set(r.source,r)},F=r=>{let{converter:e,requester:o,parser:t}=R(r);return async n=>{let s=typeof e=="function"?await e(n):n,i=await o(s);return{...await t(i),codePoint:s,source:r}}};var q=({source:r,format:e,options:o})=>{let t=b(o),a=F(r),n=w(e);return async i=>{let c=k(i),l=await a(c);return n(l,t)}};export{y as getFormatComponents,H as getFormats,b as getFullOptions,R as getSourceComponents,j as getSources,x as registerFormat,N as registerSource,q as strokes};
