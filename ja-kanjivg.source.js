var i=r=>{let e=/[-]?\d+(?:\.\d+)?/gu;return r.match(e)?.map(o=>parseFloat(o))??[]};var p=async r=>{let e=await fetch(r,{cache:"no-store"});if(!e.ok)throw new Error(`Unexpected HTTP response status code ${e.status}.`);return e};var u="image/svg+xml";var S="ja-kanjivg",v=async r=>{let s=`https://cdn.jsdelivr.net/gh/KanjiVG/kanjivg/kanji/${`${r.toString(16).padStart(5,"0")}.svg`}`;return await p(s)},j=async r=>{let e=await r.text(),o=new DOMParser().parseFromString(e,u),s=o.querySelector("svg")?.getAttribute("viewBox");if(s===null||typeof s>"u")throw new Error("Cannot get viewBox.");let a=Array.from(o.querySelectorAll("g[style]")).map(t=>parseFloat(t.style.getPropertyValue("stroke-width"))).find(t=>!isNaN(t)&&isFinite(t));if(typeof a>"u")throw new Error("Cannot get strokeWidth.");return{strokes:Array.from(o.querySelectorAll("path")).sort((t,n)=>{let[m,l]=[t,n].map(d=>{let c=d.getAttribute("id");if(c===null)throw new Error("Cannot get id.");return i(c)[1]});return m-l}).map(t=>{let n=t.getAttribute("d");if(n===null)throw new Error("Cannot get d.");return n}).map(t=>({clipPath:null,strokePath:t,strokeWidth:a})),transform:null,viewBox:s}};export{j as parser,v as requester,S as source};
